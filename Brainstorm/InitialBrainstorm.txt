Requirements:
- Turing Complete -> Means: having conditionals and loops

Initial ideas:
- Card game
- Smoking Joes
- Multiversal

Card Game:

-- start a game with 2 players
Game(READ) {

#init fase{
    Player(1){
        draws initHand
    }
    Player(2){
        draws initHand
    }
    Mulligan(1){ // Repeat while wants
        Do(READ)
    }
    Mulligan(2){
        Do(READ)
    }
}



}

Multiversal: 

timeline(0, 0) X = 7 #x é 7 na timeline 0 no passado, logo no presente ela é 8 e no futuro 9
timeline(1, 0) x = summon(0, 0, x) + 2 #x é 7+2 no presente é 8+2

timeline(0,1) x = 10 # x é 10 no passado de timeline 1
stopwatch(0,1,x) # passado presente e futuro são iguais recebendo o valor do passado

fuse(x) # x no passado presente e futuro é a soma de periodo correspondente em todos os universos
# x0pa = 17   x0pr = 19 x0f = 20

timeline(0,1) x = 2 # x é 10 no passado de timeline 1
stopwatch(0,1,x) # passado presente e fututo são iguais recebendo o valor do passado

loop_until summon(2, 0, x) <= summon(0, 0, x):

    case summon(0,1,x) < summon(1,0,x):
        timeline(1,0) x = summon(1,0,x) - summon(1,1,x)
    other
        timeline(2,0) x = summon(1,0,x) - summon(1,1,x)

reveal(x,0) #print x da timline 0




AQUA:

river x create 10

river y create 10

x >> 5 >> y
discover(x) # printa 5
discover(y) # printa 15

x branch 5
discover(x) #printa 1
y >> 1 >> x #x=2
x acumulate 5 # x = x*5

fish z create 2,1 #cria uma população de 2 que consome 1 por individuo
fish f create 1,1

x sustains z: # enquanto x sustentar z # para sustentar z é maior que 0 e z consome x no valor de seu consumo e aumenta seu numero em (população-população%2)*2
    y >> 1 >> x:
    f -> z    #f caça z para aumentar seu numero em (população-população%2)*2
    event z inf f # caso população de z é inferior a f
        extingish f

rain(y)

dry(x)

