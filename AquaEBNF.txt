AQUA:

river x create 10

river y create 10

x >> 5 >> y
discover(x) # printa 5
discover(y) # printa 15

x branch 5
discover(x) #printa 1
y >> 1 >> x #x=2
x acumulate 5 # x = x*5

fish z create 2,1 #cria uma população de 2 que consome 1 por individuo
fish f create 1,1

x sustains z: # enquanto x sustentar z # para sustentar z é maior que 0 e z consome x no valor de seu consumo e aumenta seu numero em (população-população%2)*2
    y >> 1 >> x:
    f -> z    #f caça z para aumentar seu numero em (população-população%2)*2
    event z inf f # caso população de z é inferior a f
        extingish f
        conclude
pass_time

rain(y)

dry(x)

EBNF:

BLOCK = { STATEMENT };
STATEMENT = ( "λ" | SPAW | DISCOVER | SUSTAIN | EVENT | RAIN | DRY | EXTINCTION | OPERATION ), "\n" ;
SPAW = TYPE, IDENTIFIER, "create", ( "λ" | NUMBER ) ;
DISCOVER = "discover", "(", IDENTIFIER, ")" ;
SUSTAIN = IDENTIFIER, "sustains", IDENTIFIER, "\n", "λ", { ( STATEMENT ), "λ" }, "pass_time" ;
EVENT = "event", IDENTIFIER, COMPARISSON, IDENTIFIER, "\n", "λ", { ( STATEMENT ), "λ" }, "conclude" ;
RAIN = "rain","(", IDENTIFIER, ")" ;
DRY = "dry","(", IDENTIFIER, ")" ;
EXTINCTION = "extinguish", IDENTIFIER ; 
OPERATION = IDENTIFIER, OP_T, NUMBER, ( "λ" | OP_T, IDENTIFIER ) ;
IDENTIFIER = LETTER, { LETTER | DIGIT | "_" } ;
NUMBER = DIGIT, { DIGIT } ;
LETTER = ( "a" | "..." | "z" | "A" | "..." | "Z" ) ;
DIGIT = ( "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "0" );
TYPE = ( "river" | "fish" ) ;
OP_T = ( "branch" | "acumulate" | ">>" | "->" ) ;
